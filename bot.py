import openai
import os
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv

# üîê –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

openai.api_key = OPENAI_API_KEY

# üí¨ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ ChatGPT
def generate_openai_response(prompt: str) -> str:
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",  # –∞–±–æ gpt-3.5-turbo
            messages=[
                {"role": "system", "content": "–¢–∏ ‚Äî –¥–æ–±—Ä–æ–∑–∏—á–ª–∏–≤–∏–π Telegram-–±–æ—Ç –Ω–∞ –±–∞–∑—ñ ChatGPT."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=500,
            temperature=0.7,
            request_timeout=10  # ‚è±Ô∏è —Ç–∞–π–º–∞—É—Ç OpenAI-–∑–∞–ø–∏—Ç—É
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        print("‚ùå OpenAI error:", e)
        return f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ OpenAI: {e}"

# üîÑ –û–±—Ä–æ–±–∫–∞ –≤—Ö—ñ–¥–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    print("üì© –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", user_message)

    bot_response = generate_openai_response(user_message)

    print("ü§ñ –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ OpenAI:", bot_response)
    await update.message.reply_text(bot_response[:4000])  # üîí Telegram –º–∞–∫—Å–∏–º—É–º 4096 —Å–∏–º–≤–æ–ª—ñ–≤

# üìå –°—Ç–∞—Ä—Ç–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –Ω–∞ –±–∞–∑—ñ ChatGPT. –ù–∞–ø–∏—à–∏ –º–µ–Ω—ñ —â–æ—Å—å!')

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ... –û—á—ñ–∫—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É Telegram")

    application = Application.builder().token(TELEGRAM_TOKEN).concurrent_updates(False).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    application.run_polling()

if __name__ == '__main__':
    main()
